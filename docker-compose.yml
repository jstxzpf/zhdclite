services:
  # Flask应用服务
  household-data-app:
    # 使用预构建的应用镜像（推荐用于生产环境）
    image: household-data-system-app:${VERSION:-latest}

    # 或者使用多阶段构建（开发环境）
    # build:
    #   context: .
    #   dockerfile: Dockerfile
    #   target: app-image
    #   cache_from:
    #     - household-data-system-base:${VERSION:-latest}
    #     - household-data-system-app:${VERSION:-latest}
    #   args:
    #     - BUILDKIT_INLINE_CACHE=1

    container_name: household-data-system
    restart: unless-stopped
    ports:
      - "5000:5000"
    environment:
      # Flask配置
      - FLASK_ENV=production
      - FLASK_APP=app.py
      - FLASK_RUN_HOST=0.0.0.0
      - FLASK_RUN_PORT=5000
      
      # 数据库配置 - 内部数据库
      - DB_DRIVER=${DB_DRIVER:-ODBC Driver 18 for SQL Server}
      - DB_SERVER=${DB_SERVER:-localhost}
      - DB_DATABASE=${DB_DATABASE:-hhgzhdc}
      - DB_UID=${DB_UID:-sa}
      - DB_PWD=${DB_PWD}
      - DB_ENCRYPT=${DB_ENCRYPT:-yes}
      - DB_TRUST_CERT=${DB_TRUST_CERT:-yes}
      
      # 外部数据库配置
      - EXTERNAL_DB_DRIVER=${EXTERNAL_DB_DRIVER:-ODBC Driver 18 for SQL Server}
      - EXTERNAL_DB_SERVER=${EXTERNAL_DB_SERVER:-localhost}
      - EXTERNAL_DB_DATABASE=${EXTERNAL_DB_DATABASE:-external_db}
      - EXTERNAL_DB_UID=${EXTERNAL_DB_UID:-sa}
      - EXTERNAL_DB_PWD=${EXTERNAL_DB_PWD}
      - EXTERNAL_DB_ENCRYPT=${EXTERNAL_DB_ENCRYPT:-yes}
      - EXTERNAL_DB_TRUST_CERT=${EXTERNAL_DB_TRUST_CERT:-yes}
      
      # 应用配置
      - MAX_CONTENT_LENGTH=${MAX_CONTENT_LENGTH:-16777216}  # 16MB
      - UPLOAD_FOLDER=/app/uploads
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      
    volumes:
      # 上传文件夹持久化
      - ./uploads:/app/uploads
      # 日志文件持久化
      - ./logs:/app/logs
      # 配置文件挂载（可选，用于动态配置）
      - ./config:/app/config:ro
    
    networks:
      - household-network
    
    # 健康检查
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/system/status"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    # 依赖服务（如果使用容器化数据库）
    # depends_on:
    #   - mssql-db
    
    # 资源限制
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # 可选：SQL Server数据库服务（如果需要容器化数据库）
  # mssql-db:
  #   # 使用DaoCloud加速镜像（方法二：前缀替换）
  #   # 原始镜像：mcr.microsoft.com/mssql/server:2019-latest
  #   # 加速镜像：mcr.m.daocloud.io/mssql/server:2019-latest
  #   image: mcr.m.daocloud.io/mssql/server:2019-latest
  #   container_name: household-mssql
  #   restart: unless-stopped
  #   environment:
  #     - ACCEPT_EULA=Y
  #     - SA_PASSWORD=${DB_PWD}
  #     - MSSQL_PID=Express
  #   ports:
  #     - "1433:1433"
  #   volumes:
  #     - mssql-data:/var/opt/mssql
  #     - ./sql/init:/docker-entrypoint-initdb.d:ro
  #   networks:
  #     - household-network

  # 可选：Nginx反向代理
  # nginx:
  #   # 使用DaoCloud加速镜像（方法二：前缀替换）
  #   # 原始镜像：docker.io/library/nginx:alpine
  #   # 加速镜像：docker.m.daocloud.io/library/nginx:alpine
  #   image: docker.m.daocloud.io/library/nginx:alpine
  #   container_name: household-nginx
  #   restart: unless-stopped
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   volumes:
  #     - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
  #     - ./nginx/ssl:/etc/nginx/ssl:ro
  #   depends_on:
  #     - household-data-app
  #   networks:
  #     - household-network

# 网络配置
networks:
  household-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16

# 卷配置（如果使用容器化数据库）
# volumes:
#   mssql-data:
#     driver: local
